{
 "cells": [
  {
   "cell_type": "markdown",
   "source": [
    "# 第1章 Python数据模型"
   ],
   "metadata": {}
  },
  {
   "cell_type": "markdown",
   "source": [
    "数据模型其实是对Python框架的描述，它规范了这门语言自身构建模块的接口，这些模块包括但不限于序列、迭代器、函数、类和上下文管理器。"
   ],
   "metadata": {}
  },
  {
   "cell_type": "markdown",
   "source": [
    "## 1.1 一摞Python风格的纸牌\n",
    "\n",
    "接下来使用一个简单的例子来展示如何实现__getitem__和__len__这两个特殊方法。"
   ],
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "source": [
    "# 示例1-1 建立一个纸牌类\n",
    "import collections\n",
    "\n",
    "Card = collections.namedtuple('Card', ['rank','suit'])\n",
    "\n",
    "class FrenchDeck:\n",
    "    ranks = [str(n) for n in range(2, 11)] + list('JQKA')\n",
    "    suits = 'spades diamonds clubs hearts'.split()\n",
    "\n",
    "    def __init__(self) -> None:\n",
    "        self._cards = [Card(rank, suit) for suit in self.suits\n",
    "                                        for rank in self.ranks]\n",
    "    \n",
    "    def __len__(self):\n",
    "        return len(self._cards)\n",
    "    \n",
    "    def __getitem__(self, position):\n",
    "        return self._cards[position]"
   ],
   "outputs": [],
   "metadata": {}
  },
  {
   "cell_type": "markdown",
   "source": [
    "首先，我们用collections.namedtuple构建了一个简单的类来表示一张纸牌。自Python2.6开始，namedtuple就加入到Python里，用以构建只有少数属性但是没有方法的对象，比如数据库条目。如下面的控制台会话所示，利用namedtuple，我们可以轻松地得到一个纸牌对象："
   ],
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "source": [
    "beer_card = Card('7', 'diamon')\n",
    "beer_card"
   ],
   "outputs": [],
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "source": [
    "# len()方法的使用\n",
    "deck = FrenchDeck()\n",
    "len(deck)"
   ],
   "outputs": [],
   "metadata": {}
  },
  {
   "cell_type": "markdown",
   "source": [
    "从一叠牌中抽取特定的一张纸牌，比如说第一张获最后一张，是很容易的：deck[0]或deck[-1]。这些都是由__getitem__方法提供的："
   ],
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "source": [
    "print(deck[0])\n",
    "print(deck[-1])"
   ],
   "outputs": [],
   "metadata": {}
  },
  {
   "cell_type": "markdown",
   "source": [
    "我们需要单独写一个方法来随机抽取一张纸牌吗？没必要，Python已经内置了从一个序列中随机选出一个元素的random.choice,我们直接把它用在这一摞纸牌实例上就好："
   ],
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "source": [
    "from random import choice\n",
    "print(choice(deck))\n",
    "print(choice(deck))\n",
    "print(choice(deck))"
   ],
   "outputs": [],
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "source": [
    "# 对切片操作的自动支持\n",
    "print(deck[:3])"
   ],
   "outputs": [],
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "source": [
    "deck[12::13]"
   ],
   "outputs": [],
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "source": [
    "# __getitem__方法使deck实例变成了可迭代对象\n",
    "for card in deck:\n",
    "    print(card)"
   ],
   "outputs": [],
   "metadata": {}
  },
  {
   "cell_type": "markdown",
   "source": [
    "迭代通常是隐式的，譬如说一个集合类型没有实现__contains__方法，那么in运算符就会按顺序做一次迭代搜索。于是，in运算符可以用在我们的FrenchDeck类上，因为它是可迭代的。"
   ],
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "source": [
    "Card('Q', 'hearts') in deck"
   ],
   "outputs": [],
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "source": [
    "Card('7', 'beasts') in deck"
   ],
   "outputs": [],
   "metadata": {}
  },
  {
   "cell_type": "markdown",
   "source": [
    "排序\n",
    "点数：2 最小，A 最大\n",
    "花色：黑桃 > 红桃 > 方块 > 梅花"
   ],
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "source": [
    "suit_values = dict(spades=3, hearts=2, diamonds=1, clubs=0)\n",
    "def spades_high(card):\n",
    "    rank_value = FrenchDeck.ranks.index(card.rank)\n",
    "    return rank_value * len(suit_values) + suit_values[card.suit]"
   ],
   "outputs": [],
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "source": [
    "for card in sorted(deck, key=spades_high):\n",
    "    print(card)"
   ],
   "outputs": [],
   "metadata": {}
  },
  {
   "cell_type": "markdown",
   "source": [
    "通过实现__len__和__getitem__这两个特殊方法，FrenchDeck就跟一个python自有的序列数据类型一样，可以体现出Python的核心语言特性（迭代和切片）。同时这个类还可以用于标准库中诸如random.choice、\n",
    "reversed和sorted这些函数。另外，对合成的运用使得__len__和__getitem__的具体实现可以代理给self._cards这个Python列表（即list对象）。"
   ],
   "metadata": {}
  },
  {
   "cell_type": "markdown",
   "source": [
    "问题：洗牌如何实现？\n",
    "__setitem__方法如何使用"
   ],
   "metadata": {}
  },
  {
   "cell_type": "markdown",
   "source": [
    "## 1.2 如何使用特殊方法"
   ],
   "metadata": {}
  },
  {
   "cell_type": "markdown",
   "source": [
    "首先明确一点，特殊方法的存在是为了被Python解释器调用的，你自己并不需要调用它们。\n",
    "\n",
    "通过内置的函数（例如len、iter、str, 等等）来使用特殊方法是最好的选择。这些内置函数不仅会调用特殊方法，通常还提供额外的好处，而且对于内置的类型来说，它们的速度更快。"
   ],
   "metadata": {}
  },
  {
   "cell_type": "markdown",
   "source": [
    "### 1.2.1模拟数值类型\n",
    "\n"
   ],
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "source": [
    "from math import hypot\n",
    "class Vector:\n",
    "    def __init__(self, x=0, y=0):\n",
    "        self.x = x\n",
    "        self.y = y\n",
    "\n",
    "    def __repr__(self):\n",
    "        return 'Vector(%r, %r)' % (self.x, self.y)\n",
    "\n",
    "    def __abs__(self):\n",
    "        return hypot(self.x, self.y)\n",
    "\n",
    "    def __bool__(self):\n",
    "        return bool(abs(self))\n",
    "\n",
    "    def __add__(self, other):\n",
    "        x = self.x + other.x\n",
    "        y = self.y + other.y\n",
    "        return Vector(x, y)\n",
    "\n",
    "    def __mul__(self, scalar):\n",
    "        return Vector(self.x * scalar, self.y * scalar)"
   ],
   "outputs": [],
   "metadata": {}
  },
  {
   "cell_type": "markdown",
   "source": [
    "### 1.2.2 字符串表示形式\n",
    "__repr__ 和 __str__ 的区别在于，后者是在 str() 函数被使用，或\n",
    "是在用 print 函数打印一个对象的时候才被调用的，并且它返回的字\n",
    "符串对终端用户更友好。\n",
    "\n",
    "如果你只想实现这两个特殊方法中的一个，__repr__ 是更好的选择，\n",
    "因为如果一个对象没有 __str__ 函数，而 Python 又需要调用它的时\n",
    "候，解释器会用 __repr__ 作为替代。"
   ],
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "source": [
    "repr(deck)"
   ],
   "outputs": [
    {
     "output_type": "execute_result",
     "data": {
      "text/plain": [
       "'<__main__.FrenchDeck object at 0x7f4305beb208>'"
      ]
     },
     "metadata": {},
     "execution_count": 23
    }
   ],
   "metadata": {}
  },
  {
   "cell_type": "markdown",
   "source": [
    "### 1.2.3 算术运算符\n",
    "通过 __add__ 和 __mul__，示例 1-2 为向量类带来了 + 和 * 这两个算术运算符。值得注意的是，这两个方法的返回值都是新创建的向量对\n",
    "象，被操作的两个向量（self 或 other）还是原封不动，代码里只是\n",
    "读取了它们的值而已。中缀运算符的基本原则就是不改变操作对象，而\n",
    "是产出一个新的值。第 13 章会谈到更多这方面的问题。\n"
   ],
   "metadata": {}
  },
  {
   "cell_type": "markdown",
   "source": [
    "### 1.2.4 自定义的布尔值\n",
    "默认情况下，我们自己定义的类的实例总被认为是真的，除非这个类对\n",
    "__bool__ 或者 __len__ 函数有自己的实现。bool(x) 的背后是调用\n",
    "x.__bool__() 的结果；如果不存在 __bool__ 方法，那么 bool(x) 会\n",
    "尝试调用 x.__len__()。若返回 0，则 bool 会返回 False；否则返回\n",
    "True。"
   ],
   "metadata": {}
  },
  {
   "cell_type": "markdown",
   "source": [
    "## 1.3 特殊方法一览\n",
    "当交换两个操作数的位置时，就会调用反向运算符（b * a\n",
    "而不是 a * b）。增量赋值运算符则是一种把中缀运算符变成赋值\n",
    "运算的捷径（a = a * b 就变成了 a *= b）。第 13 章会对这两\n",
    "者作出详细解释。"
   ],
   "metadata": {}
  },
  {
   "cell_type": "markdown",
   "source": [
    "## 1.4 为什么len不是普通方法\n",
    "在 1.2 节里我提到过，如果 x 是一个内置类\n",
    "型的实例，那么 len(x) 的速度会非常快。背后的原因是 CPython 会直\n",
    "接从一个 C 结构体里读取对象的长度，完全不会调用任何方法。获取一\n",
    "个集合中元素的数量是一个很常见的操作，在\n",
    "str、list、memoryview 等类型上，这个操作必须高效。\n",
    "\n",
    "换句话说，len 之所以不是一个普通方法，是为了让 Python 自带的数据\n",
    "结构可以走后门，abs 也是同理。但是多亏了它是特殊方法，我们也可\n",
    "以把 len 用于自定义数据类型。这种处理方式在保持内置类型的效率和\n",
    "保证语言的一致性之间找到了一个平衡点，也印证了“Python 之禅”中的\n",
    "另外一句话：“不能让特例特殊到开始破坏既定规则。"
   ],
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "source": [
    "## 1.5 本章小结\n",
    "通过实现特殊方法，自定义数据类型可以表现得跟内置类型一样，从而\n",
    "让我们写出更具表达力的代码——或者说，更具 Python 风格的代码。\n",
    "Python 对象的一个基本要求就是它得有合理的字符串表示形式，我们可\n",
    "以通过 __repr__ 和 __str__ 来满足这个要求。前者方便我们调试和\n",
    "记录日志，后者则是给终端用户看的。这就是数据模型中存在特殊方法\n",
    "__repr__ 和 __str__ 的原因。\n",
    "\n",
    "对序列数据类型的模拟是特殊方法用得最多的地方，这一点在\n",
    "FrenchDeck 类的示例中有所展现。在第 2 章中，我们会着重介绍序列\n",
    "数据类型，然后在第 10 章中，我们会把 Vector 类扩展成一个多维的\n",
    "数据类型，通过这个练习你将有机会实现自定义的序列。\n",
    "\n",
    "Python 通过运算符重载这一模式提供了丰富的数值类型，除了内置的那\n",
    "些之外，还有 decimal.Decimal 和 fractions.Fraction。这些数据\n",
    "类型都支持中缀算术运算符。在第 13 章中，我们还会通过对 Vector\n",
    "类的扩展来学习如何实现这些运算符，当然还会提到如何让运算符满足\n",
    "交换律和增强赋值。\n",
    "\n",
    "Python 数据模型的特殊方法还有很多，本书会涵盖其中的绝大部分，探\n",
    "讨如何使用和实现它们。\n"
   ],
   "outputs": [],
   "metadata": {}
  }
 ],
 "metadata": {
  "orig_nbformat": 4,
  "language_info": {
   "name": "python",
   "version": "3.6.9",
   "mimetype": "text/x-python",
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "pygments_lexer": "ipython3",
   "nbconvert_exporter": "python",
   "file_extension": ".py"
  },
  "kernelspec": {
   "name": "python3",
   "display_name": "Python 3.6.9 64-bit"
  },
  "interpreter": {
   "hash": "31f2aee4e71d21fbe5cf8b01ff0e069b9275f58929596ceb00d14d90e3e16cd6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}